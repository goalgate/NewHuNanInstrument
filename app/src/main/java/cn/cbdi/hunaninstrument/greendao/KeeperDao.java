package cn.cbdi.hunaninstrument.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cbdi.hunaninstrument.Bean.Keeper;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEEPER".
*/
public class KeeperDao extends AbstractDao<Keeper, Long> {

    public static final String TABLENAME = "KEEPER";

    /**
     * Properties of entity Keeper.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardID = new Property(1, String.class, "cardID", false, "CARD_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Headphoto = new Property(3, String.class, "headphoto", false, "HEADPHOTO");
        public final static Property HeadphotoRGB = new Property(4, String.class, "headphotoRGB", false, "HEADPHOTO_RGB");
        public final static Property HeadphotoBW = new Property(5, String.class, "headphotoBW", false, "HEADPHOTO_BW");
        public final static Property FaceUserId = new Property(6, String.class, "FaceUserId", false, "FACE_USER_ID");
        public final static Property Feature = new Property(7, byte[].class, "feature", false, "FEATURE");
    }


    public KeeperDao(DaoConfig config) {
        super(config);
    }
    
    public KeeperDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEEPER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_ID\" TEXT," + // 1: cardID
                "\"NAME\" TEXT," + // 2: name
                "\"HEADPHOTO\" TEXT," + // 3: headphoto
                "\"HEADPHOTO_RGB\" TEXT," + // 4: headphotoRGB
                "\"HEADPHOTO_BW\" TEXT," + // 5: headphotoBW
                "\"FACE_USER_ID\" TEXT," + // 6: FaceUserId
                "\"FEATURE\" BLOB);"); // 7: feature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEEPER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Keeper entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(2, cardID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String headphoto = entity.getHeadphoto();
        if (headphoto != null) {
            stmt.bindString(4, headphoto);
        }
 
        String headphotoRGB = entity.getHeadphotoRGB();
        if (headphotoRGB != null) {
            stmt.bindString(5, headphotoRGB);
        }
 
        String headphotoBW = entity.getHeadphotoBW();
        if (headphotoBW != null) {
            stmt.bindString(6, headphotoBW);
        }
 
        String FaceUserId = entity.getFaceUserId();
        if (FaceUserId != null) {
            stmt.bindString(7, FaceUserId);
        }
 
        byte[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindBlob(8, feature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Keeper entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(2, cardID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String headphoto = entity.getHeadphoto();
        if (headphoto != null) {
            stmt.bindString(4, headphoto);
        }
 
        String headphotoRGB = entity.getHeadphotoRGB();
        if (headphotoRGB != null) {
            stmt.bindString(5, headphotoRGB);
        }
 
        String headphotoBW = entity.getHeadphotoBW();
        if (headphotoBW != null) {
            stmt.bindString(6, headphotoBW);
        }
 
        String FaceUserId = entity.getFaceUserId();
        if (FaceUserId != null) {
            stmt.bindString(7, FaceUserId);
        }
 
        byte[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindBlob(8, feature);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Keeper readEntity(Cursor cursor, int offset) {
        Keeper entity = new Keeper( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headphoto
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headphotoRGB
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headphotoBW
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FaceUserId
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7) // feature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Keeper entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadphoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadphotoRGB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadphotoBW(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFaceUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFeature(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Keeper entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Keeper entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Keeper entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
