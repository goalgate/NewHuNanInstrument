package cn.cbdi.hunaninstrument.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cbdi.hunaninstrument.Bean.Employer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYER".
*/
public class EmployerDao extends AbstractDao<Employer, String> {

    public static final String TABLENAME = "EMPLOYER";

    /**
     * Properties of entity Employer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardID = new Property(0, String.class, "cardID", true, "CARD_ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
    }


    public EmployerDao(DaoConfig config) {
        super(config);
    }
    
    public EmployerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYER\" (" + //
                "\"CARD_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: cardID
                "\"TYPE\" INTEGER NOT NULL );"); // 1: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Employer entity) {
        stmt.clearBindings();
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(1, cardID);
        }
        stmt.bindLong(2, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Employer entity) {
        stmt.clearBindings();
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(1, cardID);
        }
        stmt.bindLong(2, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Employer readEntity(Cursor cursor, int offset) {
        Employer entity = new Employer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cardID
            cursor.getInt(offset + 1) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Employer entity, int offset) {
        entity.setCardID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Employer entity, long rowId) {
        return entity.getCardID();
    }
    
    @Override
    public String getKey(Employer entity) {
        if(entity != null) {
            return entity.getCardID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Employer entity) {
        return entity.getCardID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
